function output = xdot_disk(t,vX_in, flag_0state_1contactInfo)
  if flag_0state_1contactInfo == 0
     output = zeros(12,1); 
  else
     output = zeros(6,1); 
  end


  XDOT = zeros(18,1);

  zz = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
  aOut = [0 0 0 0 0 0 0 0 0 0 0 0];
  R1Contact11 = [0 0 0 0 0 0 0 0 0];
  R2Contact11 = [0 0 0 0 0 0 0 0 0];
  r1Contact11 = [0 0 0];
  r2Contact11 = [0 0 0];
  v1Contact11 = [0 0 0];
  v2Contact11 = [0 0 0];
  w1Contact11 = [0 0 0];
  w2Contact11 = [0 0 0];
  CParamsContact11 = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
  CParamsContact11(1) = 0.0e0;
  CParamsContact11(2) = 0.0e0;
  CParamsContact11(3) = 0.0e0;
  CParamsContact11(4) = 0.0e0;
  CParamsContact11(5) = 0.0e0;
  CParamsContact11(6) = 0.1e1;
  CParamsContact11(7) = 0.1e1;
  CParamsContact11(8) = 0.0e0;
  CParamsContact11(9) = 0.0e0;
  CParamsContact11(10) = 0.0e0;
  CParamsContact11(11) = 0.1e1;
  CParamsContact11(12) = 0.0e0;
  CParamsContact11(13) = 0.1e1;
  CParamsContact11(14) = 0.20e2;
  CParamsContact11(15) = 0.100e5;
  CParamsContact11(16) = 0.1e1;
  CParamsContact11(17) = 0.1e1;
  CParamsContact11(18) = 0.1e1;
  CParamsContact11(19) = 0.7e0;
  CParamsContact11(20) = 0.1e-1;
  CParamsContact11(21) = 0.1e0;
  t1 = vX_in(12);
  zz1 = cos(t1);
  t2 = vX_in(11);
  zz2 = cos(t2);
  zz3 = zz1 * zz2;
  R1Contact11(1) = zz3;
  zz(26) = sin(t2);
  t3 = vX_in(10);
  zz(27) = sin(t3);
  zz(28) = sin(t1);
  zz(29) = cos(t3);
  t4 = zz(27);
  zz4 = zz1 * t4;
  t5 = zz(28);
  t6 = zz(29);
  zz5 = t5 * t6;
  t7 = zz(26);
  zz(2) = t7 * zz4 + zz5;
  R1Contact11(2) = zz(2);
  zz6 = zz1 * t6;
  zz7 = t5 * t4;
  zz(5) = -0.1e1 * zz6 * t7 + zz7;
  R1Contact11(3) = zz(5);
  zz(6) = t5 * zz2;
  t11 = zz(6);
  R1Contact11(4) = -0.1e1 * t11;
  zz(3) = -0.1e1 * zz7 * t7 + zz6;
  R1Contact11(5) = zz(3);
  zz(30) = t7 * zz5 + zz4;
  R1Contact11(6) = zz(30);
  R1Contact11(7) = t7;
  zz8 = zz2 * t4;
  R1Contact11(8) = -0.1e1 * zz8;
  zz9 = zz2 * t6;
  R1Contact11(9) = zz9;
  t17 = vX_in(4);
  t19 = vX_in(5);
  zz(7) = zz1 * t17 - 0.1e1 * t5 * t19;
  t22 = zz(7);
  t24 = vX_in(6);
  zz10 = t22 * zz2 + t24 * R1Contact11(7);
  w1Contact11(1) = zz10;
  zz11 = R1Contact11(2) * t17 + R1Contact11(5) * t19 - 0.1e1 * zz8 * t24;
  w1Contact11(2) = zz11;
  zz12 = t17 * R1Contact11(3) + t19 * R1Contact11(6) + t24 * zz9;
  w1Contact11(3) = zz12;
  R2Contact11(1) = 0.1e1;
  R2Contact11(2) = 0.0e0;
  R2Contact11(3) = 0.0e0;
  R2Contact11(4) = 0.0e0;
  R2Contact11(5) = 0.1e1;
  R2Contact11(6) = 0.0e0;
  R2Contact11(7) = 0.0e0;
  R2Contact11(8) = 0.0e0;
  R2Contact11(9) = 0.1e1;
  w2Contact11(1) = 0.0e0;
  w2Contact11(2) = 0.0e0;
  w2Contact11(3) = 0.0e0;
  r1Contact11(1) = vX_in(7);
  r1Contact11(2) = vX_in(8);
  r1Contact11(3) = vX_in(9);
  v1Contact11(1) = vX_in(1);
  v1Contact11(2) = vX_in(2);
  v1Contact11(3) = vX_in(3);
  r2Contact11(1) = 0.0e0;
  r2Contact11(2) = 0.0e0;
  r2Contact11(3) = 0.0e0;
  v2Contact11(1) = 0.0e0;
  v2Contact11(2) = 0.0e0;
  v2Contact11(3) = 0.0e0;
  zz(32) = 0;
  aOut = GrabnerDiskContact(r1Contact11, r2Contact11, v1Contact11, v2Contact11, R1Contact11, R2Contact11, w1Contact11, w2Contact11, CParamsContact11);
  zz(33) = aOut(1);
  zz(34) = aOut(2);
  zz(35) = aOut(3);
  zz(36) = aOut(4);
  zz(37) = aOut(5);
  zz(38) = aOut(6);
  zz(55) = 0.1e1;
  zz(56) = 0.1e1;
  zz(57) = 0.1e1;
  zz13 = zz2 ^ 2;
  t33 = zz1 ^ 2;
  t35 = t5 ^ 2;
  t39 = R1Contact11(7) ^ 2;
  zz14 = (0.1e0 * t33 + 0.1e0 * t35) * zz13 + 0.1e0 * t39;
  zz(11) = (0.1e0 * zz1 * R1Contact11(2) - 0.1e0 * t5 * R1Contact11(5) - 0.1e0 * R1Contact11(7) * t4) * zz2;
  zz(13) = (0.1e0 * zz1 * R1Contact11(3) - 0.1e0 * t5 * R1Contact11(6) + 0.1e0 * R1Contact11(7) * t6) * zz2;
  t56 = zz(11);
  t58 = zz(13);
  zz15 = t56 * R1Contact11(2) + t58 * R1Contact11(3) + zz14 * zz3;
  t60 = t4 ^ 2;
  t63 = R1Contact11(5) ^ 2;
  t65 = R1Contact11(2) ^ 2;
  zz(15) = 0.1e0 * zz13 * t60 + 0.1e0 * t63 + 0.1e0 * t65;
  zz(16) = 0.1e0 * R1Contact11(2) * R1Contact11(3) + 0.1e0 * R1Contact11(5) * R1Contact11(6) - 0.1e0 * zz13 * t4 * t6;
  t75 = zz(15);
  t77 = zz(16);
  zz16 = t56 * zz3 + t75 * R1Contact11(2) + t77 * R1Contact11(3);
  t79 = t6 ^ 2;
  t82 = R1Contact11(3) ^ 2;
  t84 = R1Contact11(6) ^ 2;
  zz17 = 0.1e0 * zz13 * t79 + 0.1e0 * t82 + 0.1e0 * t84;
  zz18 = t58 * zz3 + t77 * R1Contact11(2) + zz17 * R1Contact11(3);
  zz(58) = zz15 * zz3 + zz16 * R1Contact11(2) + zz18 * R1Contact11(3);
  zz(19) = R1Contact11(5) * t56 - 0.1e1 * t11 * zz14 + t58 * R1Contact11(6);
  zz(20) = R1Contact11(5) * t75 - 0.1e1 * t11 * t56 + t77 * R1Contact11(6);
  zz(21) = R1Contact11(5) * t77 - 0.1e1 * t11 * t58 + zz17 * R1Contact11(6);
  t104 = zz(19);
  t106 = zz(20);
  t108 = zz(21);
  zz(59) = t104 * zz3 + t106 * R1Contact11(2) + t108 * R1Contact11(3);
  zz(22) = zz14 * R1Contact11(7) + zz2 * (-0.1e1 * t56 * t4 + t58 * t6);
  zz(24) = t56 * R1Contact11(7) + zz2 * (-0.1e1 * t75 * t4 + t77 * t6);
  zz(25) = zz2 * (zz17 * t6 - 0.1e1 * t77 * t4) + t58 * R1Contact11(7);
  t128 = zz(22);
  t130 = zz(24);
  t132 = zz(25);
  zz(60) = t128 * zz3 + t130 * R1Contact11(2) + t132 * R1Contact11(3);
  zz(61) = R1Contact11(5) * zz16 - 0.1e1 * t11 * zz15 + zz18 * R1Contact11(6);
  zz(62) = R1Contact11(5) * t106 - 0.1e1 * t11 * t104 + t108 * R1Contact11(6);
  zz(63) = R1Contact11(5) * t130 - 0.1e1 * t11 * t128 + t132 * R1Contact11(6);
  zz(64) = zz2 * (-0.1e1 * zz16 * t4 + zz18 * t6) + zz15 * R1Contact11(7);
  zz(65) = zz2 * (-0.1e1 * t106 * t4 + t108 * t6) + t104 * R1Contact11(7);
  zz(66) = zz2 * (-0.1e1 * t130 * t4 + t132 * t6) + t128 * R1Contact11(7);
  zz(70) = zz(33);
  zz(71) = zz(34);
  zz(72) = -0.981e1 + zz(35);
  t165 = w2Contact11(2);
  t167 = w2Contact11(3);
  zz(14) = zz12 * t165 - 0.1e1 * zz11 * t167;
  t170 = w2Contact11(1);
  zz(4) = -0.1e1 * zz12 * t170 + zz10 * t167;
  zz19 = -0.1e1 * zz10 * t165 + zz11 * t170;
  zz(8) = t58 * zz10 + t77 * zz11 + zz12 * zz17;
  zz(17) = t56 * zz10 + t75 * zz11 + t77 * zz12;
  zz(18) = t56 * zz11 + t58 * zz12 + zz10 * zz14;
  t186 = zz(4);
  t191 = zz(14);
  t194 = zz(17);
  t197 = zz(18);
  zz(9) = -0.1e1 * t186 * t77 - 0.1e1 * zz17 * zz19 - 0.1e1 * t58 * t191 - 0.1e1 * t194 * zz10 + t197 * zz11 + zz(38);
  t202 = zz(8);
  zz(10) = -0.1e1 * t186 * t56 - 0.1e1 * t202 * zz11 - 0.1e1 * zz14 * t191 - 0.1e1 * t58 * zz19 + t194 * zz12 + zz(36);
  zz(31) = -0.1e1 * t186 * t75 + t202 * zz10 - 0.1e1 * t56 * t191 - 0.1e1 * t77 * zz19 - 0.1e1 * t197 * zz12 + zz(37);
  t221 = zz(10);
  t223 = zz(31);
  t225 = zz(9);
  zz(73) = t221 * zz3 + t223 * R1Contact11(2) + t225 * R1Contact11(3);
  zz(74) = R1Contact11(5) * t223 - 0.1e1 * t11 * t221 + t225 * R1Contact11(6);
  zz(75) = t221 * R1Contact11(7) + zz2 * (t225 * t6 - 0.1e1 * t4 * t223);
  zz(76) = v1Contact11(1);
  zz(77) = v1Contact11(2);
  zz(78) = v1Contact11(3);
  zz(23) = 0.1e1 / zz2;
  t237 = zz(23);
  zz(67) = t22 * t237;
  zz(68) = t17 * t5 + t19 * zz1;
  zz(69) = -0.1e1 * (t22 * R1Contact11(7) - 0.1e1 * zz2 * t24) * t237;
  zz20 = 0.1e1 / zz(58);
  zz(47) = zz(59) * zz20;
  zz(48) = zz(60) * zz20;
  t249 = zz(61);
  t250 = zz(47);
  zz(49) = -0.1e1 * t249 * t250 + zz(62);
  t254 = zz(48);
  t258 = zz(64);
  zz(51) = -0.1e1 * t258 * t250 + zz(65);
  zz23 = 0.1e1 / zz(49);
  zz(50) = (-0.1e1 * t249 * t254 + zz(63)) * zz23;
  t266 = zz(51);
  t267 = zz(50);
  zz(52) = -0.1e1 * t266 * t267 - 0.1e1 * t258 * t254 + zz(66);
  zz(41) = zz(70) / zz(55);
  zz(42) = zz(71) / zz(56);
  zz(43) = zz(72) / zz(57);
  zz(44) = zz(73) * zz20;
  t280 = zz(44);
  zz(39) = -0.1e1 * t280 * t249 + zz(74);
  zz(45) = zz(39) * zz23;
  t288 = zz(45);
  zz(40) = -0.1e1 * t288 * t266 - 0.1e1 * t280 * t258 + zz(75);
  zz(46) = zz(40) / zz(52);
  t294 = zz(46);
  zz(1) = -0.1e1 * t294 * t267 + t288;
  zz(54) = zz(1);
  zz(12) = -0.1e1 * t294 * t254 - 0.1e1 * zz(54) * t250 + t280;
  zz(53) = zz(12);
  XDOT(1) = zz(41);
  XDOT(2) = zz(42);
  XDOT(3) = zz(43);
  XDOT(4) = zz(53);
  XDOT(5) = zz(54);
  XDOT(6) = t294;
  XDOT(7) = zz(76);
  XDOT(8) = zz(77);
  XDOT(9) = zz(78);
  XDOT(10) = zz(67);
  XDOT(11) = zz(68);
  XDOT(12) = zz(69);
  
  XDOT(13) = XDOT(7) * aOut(1);
  XDOT(14) = XDOT(8) * aOut(2);
  XDOT(15) = XDOT(9) * aOut(3);
  XDOT(16) = XDOT(10)* aOut(4);
  XDOT(17) = XDOT(11)* aOut(5);
  XDOT(18) = XDOT(12)* aOut(6);
  
 
  if flag_0state_1contactInfo == 0
     output = XDOT; 
  else
     output(1) = aOut(13);
     output(2) = aOut(14);
     output(3) = aOut(15); 
     output(4) = aOut(1);
     output(5) = aOut(2);
     output(6) = aOut(3);     
  end
  
end


function aOut = GrabnerDiskContact(r20, r10, v20, v10, R20, R10, w20, w10, leParams)
  for i = 1:15
    aOut(i) = 0;
  end
  epsRoot = 0.1490116119384766e-7;
  sx = leParams(1);
  sy = leParams(2);
  sz = leParams(3);
  nx = leParams(4);
  ny = leParams(5);
  nz = leParams(6);
  t1x = leParams(7);
  t1y = leParams(8);
  t1z = leParams(9);
  t2x = leParams(10);
  t2y = leParams(11);
  t2z = leParams(12);
  r = leParams(13);
  a = leParams(14);
  k = leParams(15);
  p = leParams(16);
  c = leParams(17);
  mus = leParams(18);
  mud = leParams(19);
  stVel = leParams(20);
  dyVel = leParams(21);
  nP(1) = R10(1) * nx + R10(2) * ny + R10(3) * nz;
  nP(2) = R10(4) * nx + R10(5) * ny + R10(6) * nz;
  nP(3) = R10(7) * nx + R10(8) * ny + R10(9) * nz;
  tP1(1) = R10(1) * t1x + R10(2) * t1y + R10(3) * t1z;
  tP1(2) = R10(4) * t1x + R10(5) * t1y + R10(6) * t1z;
  tP1(3) = R10(7) * t1x + R10(8) * t1y + R10(9) * t1z;
  tP2(1) = R10(1) * t2x + R10(2) * t2y + R10(3) * t2z;
  tP2(2) = R10(4) * t2x + R10(5) * t2y + R10(6) * t2z;
  tP2(3) = R10(7) * t2x + R10(8) * t2y + R10(9) * t2z;
  rO(1) = R10(1) * sx + R10(2) * sy + R10(3) * sz + r10(1);
  rO(2) = R10(4) * sx + R10(5) * sy + R10(6) * sz + r10(2);
  rO(3) = R10(7) * sx + R10(8) * sy + R10(9) * sz + r10(3);
  rM(1) = r20(1);
  rM(2) = r20(2);
  rM(3) = r20(3);
  rMO(1) = rM(1) - rO(1);
  rMO(2) = rM(2) - rO(2);
  rMO(3) = rM(3) - rO(3);
  nC(1) = R20(7);
  nC(2) = R20(8);
  nC(3) = R20(9);
  tmp1(1) = nC(2) * nP(3) - nC(3) * nP(2);
  tmp1(2) = -nC(1) * nP(3) + nC(3) * nP(1);
  tmp1(3) = nC(1) * nP(2) - nC(2) * nP(1);
  tmp2(1) = nC(2) * tmp1(3) - nC(3) * tmp1(2);
  tmp2(2) = -nC(1) * tmp1(3) + nC(3) * tmp1(1);
  tmp2(3) = nC(1) * tmp1(2) - nC(2) * tmp1(1);
  tmpf1 = tmp2(1) * nP(1) + tmp2(2) * nP(2) + tmp2(3) * nP(3);
  if (0.0e0 < tmpf1)
    tmp2(1) = -0.10e1 * tmp2(1);
    tmp2(2) = -0.10e1 * tmp2(2);
    tmp2(3) = -0.10e1 * tmp2(3);
  end
  tmpf1 = (tmp1(1) * tmp1(1) + tmp1(2) * tmp1(2) + tmp1(3) * tmp1(3)) ^ 0.5e0;
  if (tmpf1 < epsRoot)
    tmpf1 = epsRoot;
  end
  alpha = acos(abs(nP(1) * nC(1) + nP(2) * nC(2) + nP(3) * nC(3)));
  radius = r * (0.1e1 - exp(-a * sin(alpha)));
  rPMuv(1) = tmp2(1) / tmpf1;
  rPMuv(2) = tmp2(2) / tmpf1;
  rPMuv(3) = tmp2(3) / tmpf1;
  rPM(1) = radius * rPMuv(1);
  rPM(2) = radius * rPMuv(2);
  rPM(3) = radius * rPMuv(3);
  rPMO(1) = rMO(1) + rPM(1);
  rPMO(2) = rMO(2) + rPM(2);
  rPMO(3) = rMO(3) + rPM(3);
  gN = rPMO(1) * nP(1) + rPMO(2) * nP(2) + rPMO(3) * nP(3);
  if (gN < 0.0e0)
    vP20(1) = -w20(3) * rPM(2) + w20(2) * rPM(3) + v20(1);
    vP20(2) = w20(3) * rPM(1) - w20(1) * rPM(3) + v20(2);
    vP20(3) = -w20(2) * rPM(1) + w20(1) * rPM(2) + v20(3);
    tmpf1 = rPMO(1) * tP1(1) + rPMO(2) * tP1(2) + rPMO(3) * tP1(3);
    tmpf2 = rPMO(1) * tP2(1) + rPMO(2) * tP2(2) + rPMO(3) * tP2(3);
    rQO(1) = tmpf1 * tP1(1) + tmpf2 * tP2(1);
    rQO(2) = tmpf1 * tP1(2) + tmpf2 * tP2(2);
    rQO(3) = tmpf1 * tP1(3) + tmpf2 * tP2(3);
    vQ10(1) = -w10(3) * rQO(2) + w10(2) * rQO(3) + v10(1);
    vQ10(2) = w10(3) * rQO(1) - w10(1) * rQO(3) + v10(2);
    vQ10(3) = -w10(2) * rQO(1) + w10(1) * rQO(2) + v10(3);
    vPQ(1) = vP20(1) - vQ10(1);
    vPQ(2) = vP20(2) - vQ10(2);
    vPQ(3) = vP20(3) - vQ10(3);
    velNormal = vPQ(1) * nP(1) + vPQ(2) * nP(2) + vPQ(3) * nP(3);
    velTangent(1) = vPQ(1) * (tP1(1) + tP2(1));
    velTangent(2) = vPQ(2) * (tP1(2) + tP2(2));
    velTangent(3) = vPQ(3) * (tP1(3) + tP2(3));
    velTangentMag = (velTangent(1) * velTangent(1) + velTangent(2) * velTangent(2) + velTangent(3) * velTangent(3)) ^ 0.5e0;
    mu = 0.0e0;
    delta = 0.0e0;
    if (0.0e0 < velTangentMag)
      if (dyVel < velTangentMag)
        mu = mud;
      elseif (stVel < velTangentMag && velTangentMag < dyVel)
        delta = (velTangentMag - stVel) / (dyVel - stVel);
        mu = mus + (mud - mus) * delta * delta * (0.30e1 - 0.20e1 * delta);
      else
        delta = (velTangentMag + stVel) / 0.20e1 / stVel;
        mu = -mus + 0.2e1 * mus * delta * delta * (0.30e1 - 0.20e1 * delta);
      end
    end
    forceNormal = k * abs(gN) ^ p * (0.1e1 - c * velNormal);
    if (forceNormal < 0.0e0)
      forceNormal = 0.0e0;
    end
    forceTangentMag = -mu * forceNormal;
    velEps = 0.10000e4 * epsRoot;
    if (velEps < velTangentMag)
      forceTangentUV(1) = velTangent(1) / velTangentMag;
      forceTangentUV(2) = velTangent(2) / velTangentMag;
      forceTangentUV(3) = velTangent(3) / velTangentMag;
    else
      tmpf1 = velTangent(1) / velEps;
      forceTangentUV(1) = tmpf1 * (0.30e1 / 0.20e1 * abs(tmpf1) - 0.10e1 / 0.20e1 * abs(tmpf1 * tmpf1 * tmpf1));
      tmpf1 = velTangent(2) / velEps;
      forceTangentUV(2) = tmpf1 * (0.30e1 / 0.20e1 * abs(tmpf1) - 0.10e1 / 0.20e1 * abs(tmpf1 * tmpf1 * tmpf1));
      tmpf1 = velTangent(3) / velEps;
      forceTangentUV(3) = tmpf1 * (0.30e1 / 0.20e1 * abs(tmpf1) - 0.10e1 / 0.20e1 * abs(tmpf1 * tmpf1 * tmpf1));
    end
    rQM(1) = rQO(1) - rMO(1);
    rQM(2) = rQO(2) - rMO(2);
    rQM(3) = rQO(3) - rMO(3);
    aOut(1) = (forceNormal * nP(1) + forceTangentMag * forceTangentUV(1));
    aOut(2) = (forceNormal * nP(2) + forceTangentMag * forceTangentUV(2));
    aOut(3) = (forceNormal * nP(3) + forceTangentMag * forceTangentUV(3));
    aOut(4) = (rPM(2) * aOut(3) - rPM(3) * aOut(2));
    aOut(5) = (-rPM(1) * aOut(3) + rPM(3) * aOut(1));
    aOut(6) = (rPM(1) * aOut(2) - rPM(2) * aOut(1));
    aOut(7) = -aOut(1);
    aOut(8) = -aOut(2);
    aOut(9) = -aOut(3);
    aOut(10) = (rPMO(2) * aOut(9) - rPMO(3) * aOut(8));
    aOut(11) = (-rPMO(1) * aOut(9) + rPMO(3) * aOut(7));
    aOut(12) = (rPMO(1) * aOut(8) - rPMO(2) * aOut(7));
    
    aOut(13) = rPMO(1) + r10(1);
    aOut(14) = rPMO(2) + r10(2);
    aOut(15) = rPMO(3) + r10(3);
    
  end
  
end